// Sample: Person class with Address sub-class
@sample
[CodeConjure.Samples.Person]
Age: int
firstName: string
lastName: string
FullName: string
	get firstName + " " + lastName
Addresses: List<Address> //List of current and past addresses
CurrentAddress : Address //Returns the current address from a list of address assigned to this person
	get
	if (Addresses != null && Addresses.Length > 0) {
		return Addresses.FirstOrDefault(a => a.IsActive);
	}
&GetAll(): List<Person>
&Load(id: int): Person
&Delete(id: int): void
&Insert(data: Person): int
AddAddress(street: string, houseNo: int, countryId: int, startDate: DateTime, endDate: DateTime?): Address //Add address to this person's list of addresses
(): void
	Addresses = new List<Address>();
(age: int, firstName: string, lastName: string): void
	Addresses = new List<Address>();

[Person.Address]
Street: string
HouseNo: int
countryId: int
StartDate: DateTime
EndDate: DateTime?
IsActive : bool //Checks if the address is still active (based on EndDate)
	get !EndDate.HasValue
GetCountry(): Country
Deactivate(): DateTime
(street: string, houseNo: int, countryId: int, startDate: DateTime, endDate: DateTime?): void

[Person.Address.Country]
id: int
Name: string
_countryCode: string
CountryCode: string
	get _countryCode
	set _countryCode
&GenerateId(seed: int):int
verifyCountryCode(): bool
	return CountryCode.Length == 2;
(_id: int, _name: string, _countryCode: string): void

[Person.Contact]
email: string
Email: string
	get email
	set
	if (value.Length > 0) email = value;
HomePhone: string
WorkPhone: string
MobilePhone: string
IsAnyPhoneSet: bool
	get !string.IsNullOrEmpty(HomePhone) || !string.IsNullOrEmpty(WorkPhone) || !string.IsNullOrEmpty(MobilePhone)
(_email: string, _homePhone: string, _workPhone: string, _mobilePhone: string): void
ClearAll() : void
	HomePhone = "";
	WorkPhone = "";
	MobilePhone = "";
	email = "";